{"version":3,"sources":["components/imagens/loading/loading.gif","App.js","components/loading.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Principal","Component","lazy","e","then","bind","Sobre","Porfolio","Habilidades","Contatos","App","document","title","console","log","this","state","process","react_default","a","createElement","className","href","Bootstrap","rel","Animate","react","fallback","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8MCkBlCC,SCdgBC,YDcJC,eAAK,kBAAMJ,EAAAK,EAAA,GAAAC,KAAAN,EAAAO,KAAA,aACvBC,EAAQJ,eAAK,kBAAMJ,EAAAK,EAAA,GAAAC,KAAAN,EAAAO,KAAA,YACnBE,EAAWL,eAAK,kBAAMJ,EAAAK,EAAA,GAAAC,KAAAN,EAAAO,KAAA,YACtBG,EAAcN,eAAK,kBAAMJ,EAAAK,EAAA,GAAAC,KAAAN,EAAAO,KAAA,YACzBI,EAAWP,eAAK,kBAAMJ,EAAAK,EAAA,GAAAC,KAAAN,EAAAO,KAAA,YAiCbK,8LA3BXC,SAASC,MAAQ,iDAKjB,OAFAC,QAAQC,IAAIC,KAAKC,OACjBH,QAAQC,IAAI,0BAA2BG,kBAGrCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAME,KAAMC,IAAWC,IAAI,eAC3BN,EAAAC,EAAAC,cAAA,QAAME,KAAK,6DAA6DE,IAAI,eAC5EN,EAAAC,EAAAC,cAAA,QAAME,KAAMG,IAASD,IAAI,eAEzBN,EAAAC,EAAAC,cAACM,EAAA,SAAD,CAAUC,SAAUT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACjCH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,IAAOC,UAAW/B,IACnCkB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,SAAYC,UAAWzB,IACxCY,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,eAAkBC,UAAWvB,IAC9CU,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,aAAgBC,UAAWxB,IAC5CW,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,YAAeC,UAAWtB,aAnBnCR,aEdE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,SAAUvB,kBAAwBC,EAAAC,EAAAC,cAAEqB,EAAF,OAAmB9B,SAAS+B,eAAe,SD0H/F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.b9e4a190.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.6a967ea2.gif\";","/*Core*/\r\nimport React, { Component, lazy, Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\n/*Estilo*/\r\nimport './styles/App.scss';\r\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Animate from './styles/Animate.css';\r\n/*Pages*/\r\n/*import Principal from './pages/Principal';\r\nimport Sobre from './pages/Sobre';\r\nimport Portfolio from './pages/Porfolio';\r\nimport Habilidades from './pages/Habilidades';\r\nimport Contatos from './pages/Contatos';\r\n*/\r\nimport Loading from './components/loading';\r\n\r\nconst Principal = lazy(() => import('./pages/Principal'));\r\nconst Sobre = lazy(() => import('./pages/Sobre'));\r\nconst Porfolio = lazy(() => import('./pages/Porfolio'));\r\nconst Habilidades = lazy(() => import('./pages/Habilidades'));\r\nconst Contatos = lazy(() => import('./pages/Contatos'));\r\n\r\n\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    document.title = \"Dev Alan Reis\"\r\n  }\r\n  render() {\r\n    console.log(this.state);\r\n    console.log(\"This is the process.env\", process.env.PUBLIC_URL);\r\n    return (\r\n\r\n      <div className=\"App\" >\r\n        <link href={Bootstrap} rel=\"stylesheet\" />\r\n        <link href=\"https://fonts.googleapis.com/css?family=Cormorant+Garamond\" rel=\"stylesheet\" />\r\n        <link href={Animate} rel=\"stylesheet\" />\r\n\r\n        <Suspense fallback={<div className='loading-screen'></div>}>\r\n          <Route exact path={`/`} component={Principal}/>\r\n          <Route exact path={`/sobre`} component={Sobre} />\r\n          <Route exact path={`/habilidades`} component={Habilidades} />\r\n          <Route exact path={`/portfolio`} component={Porfolio} />\r\n          <Route exact path={`/contatos`} component={Contatos} />\r\n        </Suspense>\r\n\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport img from '../components/imagens/loading/loading.gif';\r\n\r\nclass loading extends Component {\r\n    render() {\r\n        return (\r\n            <div className='loading-screen'></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default loading;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}